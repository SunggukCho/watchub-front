{"remainingRequest":"C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\src\\components\\Home\\Latest.vue?vue&type=template&id=826a0d52&","dependencies":[{"path":"C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\src\\components\\Home\\Latest.vue","mtime":1606285235101},{"path":"C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sung kook\\projects\\final-pjt\\final-pjt-front-watchub\\watchub-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}